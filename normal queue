#include<iostream>
#define MAX 5

using namespace std;

class Queue
{
private:
    int* arr;
    int Size;
    int capacity;
    int Front;
    int rear;

public:
    Queue();

    void EnQueue();
    int DeQueue();
    int peek();
    int IsFull();
    int IsEmpty();
    void display();
    Queue create_a_queue();

    int getFront(){
        return Front;
    }
    int getRear(){
        return rear;
    }
    int getSize(){
        return Size;
    }

};

Queue::Queue()
{
    arr = new int[MAX];

    for(int i = 0; i < MAX ; i++){
        arr[i] = 0;
    }
    Size = 0;
    capacity = MAX;
    Front = 0;
    rear = -1;
}

int Queue::IsFull()
{
    return Size == capacity;
}

int Queue::IsEmpty()
{
    return Size == 0;
}

void Queue::EnQueue()
{
    cout << "nhap cac phan tu can them vao: " << endl;
    int item = 0;
    while(cin >> item){
        if(IsFull()){
            cout << "overflow" << endl;
            break;
        }
        else{
            rear = (rear + 1) % capacity;
            arr[rear] = item;
            Size++;
        }
    }
    cin.clear();
    cin.ignore();

}

int Queue::DeQueue()
{
    int rmv = 0;
    int item = 0;
    cout << "nhap so phan tu loai ra: ";
    cin >> rmv;
    for(int i = 0 ; i < rmv; i++){
        if(IsEmpty()){
            cout << "underflow" << endl;
        }
        else{
            item = arr[Front];
            arr[Front] = 0;
            Front = (Front + 1) % capacity;
            Size--;
        }
    }
    return item;
}

int Queue::peek()
{
    return arr[Front];
}


void Queue::display()
{
    //cout << Size << " " << Front;
    int copy_front = Front;
    int dem = 0;
    do{
        cout << arr[copy_front] << " ";
        copy_front = (copy_front + 1) % capacity;
        dem++;
    }while((arr[copy_front] != 0) && (dem != capacity));
    cout << endl;

}


int main()
{
    Queue Q;
    Q.EnQueue();
    Q.display();

    Q.DeQueue();
    Q.display();

    Q.EnQueue();
    Q.display();
    //Q.display();
}
